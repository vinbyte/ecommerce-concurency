// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ecommerce-app/domain"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CheckUserByID provides a mock function with given fields: ctx, dbTx, userID
func (_m *OrderRepository) CheckUserByID(ctx context.Context, dbTx *sql.Tx, userID int) (int, error) {
	ret := _m.Called(ctx, dbTx, userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) int); ok {
		r0 = rf(ctx, dbTx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, dbTx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CleanCartAndOrders provides a mock function with given fields: ctx
func (_m *OrderRepository) CleanCartAndOrders(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCart provides a mock function with given fields: ctx, dbTx, userID
func (_m *OrderRepository) CreateCart(ctx context.Context, dbTx *sql.Tx, userID int) (int, error) {
	ret := _m.Called(ctx, dbTx, userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) int); ok {
		r0 = rf(ctx, dbTx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, dbTx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrders provides a mock function with given fields: ctx, dbTx, userID
func (_m *OrderRepository) CreateOrders(ctx context.Context, dbTx *sql.Tx, userID int) (int, error) {
	ret := _m.Called(ctx, dbTx, userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) int); ok {
		r0 = rf(ctx, dbTx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, dbTx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCart provides a mock function with given fields: ctx, dbTx, cartID
func (_m *OrderRepository) DeleteCart(ctx context.Context, dbTx *sql.Tx, cartID int) error {
	ret := _m.Called(ctx, dbTx, cartID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, dbTx, cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartData provides a mock function with given fields: ctx, dbTx, cartID, isRowLocking
func (_m *OrderRepository) GetCartData(ctx context.Context, dbTx *sql.Tx, cartID int, isRowLocking bool) (domain.CartData, error) {
	ret := _m.Called(ctx, dbTx, cartID, isRowLocking)

	var r0 domain.CartData
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, bool) domain.CartData); ok {
		r0 = rf(ctx, dbTx, cartID, isRowLocking)
	} else {
		r0 = ret.Get(0).(domain.CartData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int, bool) error); ok {
		r1 = rf(ctx, dbTx, cartID, isRowLocking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCartItems provides a mock function with given fields: ctx, dbTx, cartID, productCode, Qty
func (_m *OrderRepository) InsertCartItems(ctx context.Context, dbTx *sql.Tx, cartID int, productCode string, Qty int) error {
	ret := _m.Called(ctx, dbTx, cartID, productCode, Qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, string, int) error); ok {
		r0 = rf(ctx, dbTx, cartID, productCode, Qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOrderItems provides a mock function with given fields: ctx, dbTx, orderID, productCode, qty
func (_m *OrderRepository) InsertOrderItems(ctx context.Context, dbTx *sql.Tx, orderID int, productCode string, qty int) error {
	ret := _m.Called(ctx, dbTx, orderID, productCode, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, string, int) error); ok {
		r0 = rf(ctx, dbTx, orderID, productCode, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
