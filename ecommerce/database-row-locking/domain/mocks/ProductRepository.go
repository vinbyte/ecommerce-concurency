// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ecommerce-app/domain"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// GetAllProducts provides a mock function with given fields: ctx, offset, limit
func (_m *ProductRepository) GetAllProducts(ctx context.Context, offset int, limit int) ([]domain.Product, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Product); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByCode provides a mock function with given fields: ctx, dbTx, productCode, isRowLocking
func (_m *ProductRepository) GetProductByCode(ctx context.Context, dbTx *sql.Tx, productCode string, isRowLocking bool) (domain.Product, error) {
	ret := _m.Called(ctx, dbTx, productCode, isRowLocking)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, bool) domain.Product); ok {
		r0 = rf(ctx, dbTx, productCode, isRowLocking)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, bool) error); ok {
		r1 = rf(ctx, dbTx, productCode, isRowLocking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStock provides a mock function with given fields: ctx, dbTx, productCode, stock
func (_m *ProductRepository) UpdateStock(ctx context.Context, dbTx *sql.Tx, productCode string, stock int) error {
	ret := _m.Called(ctx, dbTx, productCode, stock)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, int) error); ok {
		r0 = rf(ctx, dbTx, productCode, stock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
